type Query{
    findAllUser: [User]
    findUserById(id: ID): User

    findAllRole: [Role]
    findRoleById(id: ID): Role

    findAllUserProfile: [UserProfile]
    findUserProfileById(id: ID): UserProfile

    findAllTranslatorProfile: [TranslatorProfile]
    findTranslatorProfileById(id: ID): TranslatorProfile

    findAllCall: [Call]
    findCallById(id: ID): Call

    findAllCategory: [Category]
    findCategoryById(id: ID): Category

    findAllCoin: [Coin]
    findCoinById(id: ID): Coin

    findAllDebtor: [Debtor]
    findDebtorById(id: ID): Debtor

    findAllDeposit: [Deposit]
    findDepositById(id: ID): Deposit

    findAllFile: [File]
    findFileById(id: ID): File

    findAllFrequentlyAskedQuestion: [FrequentlyAskedQuestion]
    findFrequentlyAskedQuestionById(id: ID): FrequentlyAskedQuestion

    findAllLanguage: [Language]
    findLanguageById(id: ID): Language

    findAllPasswordReset: [PasswordReset]
    findPasswordResetById(id: ID): PasswordReset

    findAllRating:[Rating]
    findRatingById(id: ID): Rating

    findAllTheme:[Theme]
    findThemeById(id: ID): Theme

    findAllWithdrawalService:[Withdrawal]
    findWithdrawalById(id: ID): Withdrawal
}

type Mutation{
    addUser(
        firstName: String
        lastName: String
        apnToken: String
        fcmToken: String
        password: String
        phone: String
        balance: Float
        ratings: Float
        isActive: Boolean
        isDebtor: Boolean
        onBoardingStatus: Int
        totalRatings: Int): User
    deleteUser(id: ID): Boolean
    editUser(id: ID
        firstName: String
        lastName: String
        apnToken: String
        fcmToken: String
        password: String
        phone: String
        balance: Float
        ratings: Float
        isActive: Boolean
        isDebtor: Boolean
        onBoardingStatus: Int
        totalRatings: Int): User

    addRole(name: String): Role
    deleteRole(id: ID): Boolean
    editRole(id: ID
        name: String): Role

    addUserProfile(isFreeCallMade: Boolean): UserProfile
    deleteUserProfile(id: ID):Boolean
    editUserProfile(id:ID
                    isFreeCallMade: Boolean): UserProfile

    addTranslatorProfile(dateOfBirth: String
        email: String
        isAvailable: Boolean
        isOnline: Boolean
        levelOfKorean: String
        isActive: Boolean):TranslatorProfile
    deleteTranslatorProfile(id: ID):Boolean
    editTranslatorProfile(id:ID
        dateOfBirth: String
        email: String
        isAvailable: Boolean
        isOnline: Boolean
        levelOfKorean: String
        isActive: Boolean): TranslatorProfile

    addCall(callStatus: String
        channelName: String
        commission: Float
        duration: Int
        isEndCall: Boolean
        status: Boolean
        sum: Float
        translatorHasRated: Boolean
        userHasRated: Boolean
        userCall: Int
        userAnswer: Int
        theme: Int
        user: Int): Call
    deleteCall(id: ID):Boolean
    editCall(id:ID
        callStatus: String
        channelName: String
        commission: Float
        duration: Int
        isEndCall: Boolean
        status: Boolean
        sum: Float
        translatorHasRated: Boolean
        userHasRated: Boolean
        userCall: Int
        userAnswer: Int
        theme: Int
        user: Int): Call

    addCategory(isActive:Boolean
        name: String): Category
    deleteCategory(id: ID):Boolean
    editCategory(id: ID
        isActive:Boolean
        name: String): Category

    addCoin(coin: Float
        won: Float): Coin
    deleteCoin(id: ID):Boolean
    editCoin(id:ID
        coin: Float
        won: Float): Coin

    addDebtor(accountHolder: String
        isPaid: Boolean
        nameOfBank: String): Debtor
    deleteDebtor(id: ID):Boolean
    editDebtor(id:ID
        accountHolder: String
        isPaid: Boolean
        nameOfBank: String): Debtor

    addDeposit(accountHolder: String
        coin: Float
        nameOfBank: String
        status: String
        won:Float): Deposit
    deleteDeposit(id: ID):Boolean
    editDeposit(id: ID
        accountHolder: String
        coin: Float
        nameOfBank: String
        status: String
        won:Float): Deposit

    addFile(originalTitle: String
        path: String
        fileType: String): File
    deleteFile(id: ID):Boolean
    editFile(id: ID
        originalTitle: String
        path: String
        fileType: String): File

    addFrequentlyAskedQuestion(category: String
        answer: String
        question: String): FrequentlyAskedQuestion
    deleteFrequentlyAskedQuestion(id: ID):Boolean
    editFrequentlyAskedQuestion(id: ID
        category: String
        answer: String
        question: String): FrequentlyAskedQuestion

    addLanguage(name : String): Language
    deleteLanguage(id: ID):Boolean
    editLanguage(id: ID
        name: String): Language

    addPasswordReset(phone: String
        resetCode: Int
        token: String): PasswordReset
    deletePasswordReset(id: ID):Boolean
    editPasswordReset(id: ID
        phone: String
        resetCode: Int
        token: String): PasswordReset

    addRating(grade: Float): Rating
    deleteRating(id: ID):Boolean
    editRating(id: ID
        grade: Float): Rating

    addTheme(description: String
        isActive: Boolean
        isPopular: Boolean
        koreanTitle: String
        name: String
        nightPrice: Float
        price: Float):Theme
    deleteTheme(id: ID):Boolean
    editTheme(id: ID
        description: String
        isActive: Boolean
        isPopular: Boolean
        koreanTitle: String
        name: String
        nightPrice: Float
        price: Float):Theme

    addWithdrawal(status: String
        accountHolder: String
        accountNumber: String
        nameOfBank: String
        sum: Float): Withdrawal
    deleteWithdrawal(id: ID):Boolean
    editWithdrawal(id: ID
        status: String
        accountHolder: String
        accountNumber: String
        nameOfBank: String
        sum: Float): Withdrawal
}

type User{
    id:ID
    createdAt: String
    updatedAt: String
    firstName: String
    lastName: String
    apnToken: String
    fcmToken: String
    password: String
    phone: String
    balance: Float
    ratings: Float
    isActive: Boolean
    isDebtor: Boolean
    onBoardingStatus: Int
    totalRatings: Int
    roles: [Role]
    userProfile: UserProfile
    translatorProfile: TranslatorProfile
}

type Role{
    id:ID
    name: String
    createdAt: String
    updatedAt: String
}

type UserProfile{
    id:ID
    isFreeCallMade: Boolean
    createdAt: String
    updatedAt: String
}

type TranslatorProfile{
    id:ID
    createdAt: String
    updatedAt: String
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
    isActive: Boolean
}

type Call{
    id:ID
    createdAt: String
    updatedAt: String
    callStatus: String
    channelName: String
    commission: Float
    duration: Int
    isEndCall: Boolean
    status: Boolean
    sum: Float
    translatorHasRated: Boolean
    userHasRated: Boolean
    userCall: User
    userAnswer: User
    theme: Theme
    user: User
}

type Category{
    id:ID
    createdAt: String
    updatedAt: String
    isActive:Boolean
    name: String
}

type Coin{
    id:ID
    createdAt: String
    updatedAt: String
    coin: Float
    won: Float
}

type Debtor{
    id:ID
    createdAt: String
    updatedAt: String
    accountHolder: String
    isPaid: Boolean
    nameOfBank: String
}

type Deposit{
    id:ID
    createdAt: String
    updatedAt: String
    accountHolder: String
    coin: Float
    nameOfBank: String
    status: String
    won:Float
}

type File{
    id:ID
    createdAt: String
    updatedAt: String
    originalTitle: String
    path: String
    fileType: String
}

type FrequentlyAskedQuestion{
    id:ID
    createdAt: String
    updatedAt: String
    category: String
    answer: String
    question: String
}

type Language{
    id:ID
    createdAt: String
    updatedAt: String
    name: String
}

type PasswordReset{
    id:ID
    createdAt: String
    phone: String
    resetCode: Int
    token: String
}
type Rating{
    id:ID
    createdAt: String
    updatedAt: String
    grade: Float
}

type Theme{
    id:ID
    createdAt: String
    updatedAt: String
    description: String
    isActive: Boolean
    isPopular: Boolean
    koreanTitle: String
    name: String
    nightPrice: Float
    price: Float
}

type Withdrawal{
    id:ID
    createdAt: String
    updatedAt: String
    status: String
    accountHolder: String
    accountNumber: String
    nameOfBank: String
    sum: Float
}