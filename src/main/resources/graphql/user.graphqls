extend type Query{
    findAllUser: [User]
    findAllUserPagination(offset: Int,
        limit: Int): [User]
    findUserById(id: ID): User
    currentUser:User
}
extend type  Mutation{
    registrationUser(userInput: UserInput !): RefreshTokenResponse
    registrationAdmin(userInput: UserInput !): RefreshTokenResponse
    deleteUserById(id: ID): String
    updateUserName(firstName: String
        lastName: String): User
    updatePhone(phone: String !
        password: String !): Boolean
    deleteCurrentUser: Boolean
    resetNewPassword(token: String !
        password: String !):String
    addApnToken(apnToken: String !): Boolean
    deleteApnToken: Boolean
    addFcmToken(fcmToken: String !): Boolean
    deleteFcmToken: Boolean

}

type User{
    id:ID
    createdAt: String
    updatedAt: String
    firstName: String
    lastName: String
    apnToken: String
    fcmToken: String
    phone: String
    balance: Float
    ratings: Float
    isActive: Boolean
    isDebtor: Boolean
    onBoardingStatus: Int
    totalRatings: Int
    roles: [Role]
    profile: Profile
}

input UserInput{
    firstName: String!
    lastName: String!
    password: String!
    phone: String!
#    apnToken: String
#    fcmToken: String
#    balance: Float
#    ratings: Float
#    isActive: Boolean
#    isDebtor: Boolean
#    onBoardingStatus: Int
#    totalRatings: Int
#    roles: [String]
#    userProfile: Int
#    translatorProfile: Int
}

type Profile {
    isFreeCallMade: String
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
    languages: [Language]
    themes: [Theme]
    selfDescription: String
}